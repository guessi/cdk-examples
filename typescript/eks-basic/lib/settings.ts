import { SubnetType } from "aws-cdk-lib/aws-ec2";
import {
  AuthenticationMode,
  KubernetesVersion,
  EndpointAccess,
  IpFamily,
  ClusterLoggingTypes,
} from "aws-cdk-lib/aws-eks";

export const clusterName = "cdk-eks-cluster";
export const clusterVersion = KubernetesVersion.V1_32;
export const endpointAccess = EndpointAccess.PUBLIC_AND_PRIVATE;
export const authenticationMode = AuthenticationMode.API_AND_CONFIG_MAP;
export const subnetType = SubnetType.PRIVATE_WITH_EGRESS;
export const ipFamily = IpFamily.IP_V4;
export const serviceIpv4Cidr = "172.20.0.0/16";
export const defaultCapacity = 0;
export const clusterLogging = [
  ClusterLoggingTypes.API,
  ClusterLoggingTypes.AUTHENTICATOR,
  ClusterLoggingTypes.SCHEDULER,
  ClusterLoggingTypes.AUDIT,
  ClusterLoggingTypes.CONTROLLER_MANAGER,
];

// Chart version definitions

export const chartVersionAwsLBC = "1.12.0";

// Managed Addons version definitions

export const versionsKubeProxy: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_31, "v1.32.0-eksbuild.2"],
  [KubernetesVersion.V1_31, "v1.31.3-eksbuild.2"],
  [KubernetesVersion.V1_30, "v1.30.9-eksbuild.3"],
]);

const versionsCoreDnsDefault = "v1.11.4-eksbuild.2";
export const versionsCoreDNS: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_32, versionsCoreDnsDefault],
  [KubernetesVersion.V1_31, versionsCoreDnsDefault],
  [KubernetesVersion.V1_30, versionsCoreDnsDefault],
]);

const versionsVpcCniDefault = "v1.19.2-eksbuild.5";
export const versionsVpcCni: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_32, versionsVpcCniDefault],
  [KubernetesVersion.V1_31, versionsVpcCniDefault],
  [KubernetesVersion.V1_30, versionsVpcCniDefault],
]);

const versionsPodIdentityAgentDefault = "v1.3.5-eksbuild.2";
export const versionsPodIdentityAgent: Map<KubernetesVersion, string> = new Map(
  [
    [KubernetesVersion.V1_32, versionsPodIdentityAgentDefault],
    [KubernetesVersion.V1_31, versionsPodIdentityAgentDefault],
    [KubernetesVersion.V1_30, versionsPodIdentityAgentDefault],
  ]
);

const versionsEbsCsiDriverDefault = "v1.40.0-eksbuild.1";
export const versionsEbsCsiDriver: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_32, versionsEbsCsiDriverDefault],
  [KubernetesVersion.V1_31, versionsEbsCsiDriverDefault],
  [KubernetesVersion.V1_30, versionsEbsCsiDriverDefault],
]);

const versionsCwObservabilityDefault = "v3.4.0-eksbuild.1";
export const versionsCwObservability: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_32, versionsCwObservabilityDefault],
  [KubernetesVersion.V1_31, versionsCwObservabilityDefault],
  [KubernetesVersion.V1_30, versionsCwObservabilityDefault],
]);

const versionsMetricsServerDefault = "v0.7.2-eksbuild.2";
export const versionsMetricsServer: Map<KubernetesVersion, string> = new Map([
  [KubernetesVersion.V1_32, versionsMetricsServerDefault],
  [KubernetesVersion.V1_31, versionsMetricsServerDefault],
  [KubernetesVersion.V1_30, versionsMetricsServerDefault],
]);

/*
  The addon versions above are generated by the script below

  Replace the addon name with the following ones
  - "kube-proxy"
  - "coredns"
  - "vpc-cni"
  - "eks-pod-identity-agent"
  - "aws-ebs-csi-driver"
  - "amazon-cloudwatch-observability"
  - "metrics-server"

  ADDON_NAME=kube-proxy

  SUPPORTED_K8S_VERSION=("1.32" "1.31" "1.30")

  for K8S_VERSION in ${SUPPORTED_K8S_VERSION[@]}; do \
    aws eks describe-addon-versions \
      --addon-name ${ADDON_NAME} \
      --kubernetes-version ${K8S_VERSION} \
      --output json | \
        jq '.addons[].addonVersions[0].addonVersion'
  done
*/
